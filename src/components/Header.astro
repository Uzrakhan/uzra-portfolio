---
import Menu from "@icons/Menu.astro";
import { Image } from "astro:assets";
import type { HeaderProps } from "@types";

type Props = HeaderProps;

interface Props {
  siteLogo: { text: string; link: string };
  navLinks: { name: string; href: string }[];
  isStickyHeader: boolean; // Accept the new prop
}

const { siteLogo, navLinks, isStickyHeader } = Astro.props;

const headerClasses = [
    // 1. Base Layout/Container Classes (These should *always* be applied)
    "mx-auto flex max-w-5xl justify-between px-5 py-6 w-full animate-slide-in", 
    "bg-black", // Base background color

    // 2. Conditional Sticky Classes
    isStickyHeader ? "sticky top-0 z-50 bg-black/80 backdrop-blur-md" : "" 
    
    // NOTE: I removed py-5 from the conditional class list and added py-6 to the base list 
    // to match your original HTML structure closely.
];

---

<header class:list={headerClasses}>
  <a href="/" aria-label="Home link">
    <Image
      class="rounded-full"
      src={siteLogo}
      width="45"
      height="45"
      alt="website logo"
    />
  </a>

  <button
    type="button"
    id="menu-button"
    class="px-1.5 text-neutral sm:hidden"
    aria-expanded="false"
    aria-controls="main-menu"
  >
    <Menu />
  </button>

  <nav
    class="absolute top-20 right-5 hidden rounded-xl border border-neutral/40 bg-black px-4 py-5 text-neutral sm:static sm:block sm:border-0 sm:bg-transparent sm:p-0"
    id="main-menu"
  >
    <ul class="gap-2 sm:flex">
      {
        navLinks.map((link) => (
          <li class="relative">
            <a
              class={`nav-item relative block p-2 text-sm font-medium transition-all duration-500 after:absolute after:bottom-0 after:left-2/4 after:h-2 after:w-1 after:-translate-x-2/4 after:text-primary after:opacity-0 after:content-['•'] hover:text-white`}
              href={link.href}
            >
              {link.text}
            </a>
          </li>
        ))
      }
    </ul>
  </nav>
</header>

<script>
  // Toggle mobile menu
  const button = document.querySelector("#menu-button");
  const menu = document.querySelector("#main-menu");
  const navItems = document.querySelectorAll("#main-menu > ul > li > a");

  const toggleMenu = () => {
    menu?.classList.toggle("hidden");
    const isHidden = menu?.classList.contains("hidden");
    button?.setAttribute("aria-expanded", `${!isHidden}`);
  };

  button?.addEventListener("click", toggleMenu);
  navItems.forEach((item) => {
    item?.addEventListener("click", toggleMenu);
  });

  // Update navigation based on scroll position with Intersection Observer
  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("href") === `#${entry.target.id}`) {
              item.classList.add("text-white", "md:after:opacity-100");
            } else {
              item.classList.remove("text-white", "md:after:opacity-100");
            }
          });
        }
      });
    },
    { threshold: 0.5 },
  );

  document.querySelectorAll("section").forEach((section) => {
    observer.observe(section);
  });

  // Cleanup observer
  document.onvisibilitychange = () => {
    if (document.visibilityState === "hidden") {
      observer.disconnect();
    } else {
      document.querySelectorAll("section").forEach((section) => {
        observer.observe(section);
      });
    }
  };
</script>

<style>
  header {
    animation-timeline: scroll();
    animation-range: 0 650px;
  }
</style>
